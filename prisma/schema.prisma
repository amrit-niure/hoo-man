generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  name             String
  email            String
  passwordHash     String?
  role             Role
  onBoarded        Boolean         @default(false)
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  sessions         Session[]
  accounts         Account[]
  company          CompanyProfile?
  employee         Employee?
  companyProfileId String?
  PayrollRun       PayrollRun[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Employee {
  id               String          @id @default(uuid())
  userId           String          @unique
  name             String
  avatar           String?
  email            String
  phone            String
  position         String
  department       Department
  address          String
  dateOfBirth      DateTime
  joinDate         DateTime
  status           EmployeeStatus  @default(ACTIVE)
  user             User            @relation(fields: [userId], references: [id])
  attendances      Attendance[]
  payslips         Payslip[]
  leaveRequests    Leave[]
  CompanyProfile   CompanyProfile? @relation(fields: [companyProfileId], references: [id])
  companyProfileId String?
  bankDetails      BankDetail[]
  taxInformation   TaxInformation?
  superannuation   Superannuation?
  documents        String[]

  @@map("employees")
}

model Payslip {
  id              String        @id @default(uuid())
  employeeId      String
  payPeriodStart  DateTime
  payPeriodEnd    DateTime
  grossAmount     Float
  netAmount       Float
  deductions      Float
  taxAmount       Float
  superAmount     Float
  leaveDeductions Float
  hourlyRate      Float
  hoursWorked     Float
  paymentDate     DateTime
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  stripePaymentId String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  employee        Employee      @relation(fields: [employeeId], references: [id])
  payrollRun      PayrollRun?   @relation(fields: [payrollRunId], references: [id])
  payrollRunId    String?
  metadata        Json?

  @@map("payslips")
}

model PayrollRun {
  id               String         @id @default(uuid())
  name             String
  description      String?
  payPeriodStart   DateTime
  payPeriodEnd     DateTime
  totalGross       Float
  totalNet         Float
  totalTax         Float
  totalSuper       Float
  status           PayrollStatus  @default(DRAFT)
  processedAt      DateTime?
  processedById    String
  processedBy      User           @relation(fields: [processedById], references: [id])
  companyProfileId String
  companyProfile   CompanyProfile @relation(fields: [companyProfileId], references: [id])
  payslips         Payslip[]
  stripeBatchId    String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("payroll_runs")
}

model BankDetail {
  id              String   @id @default(uuid())
  employeeId      String
  bankName        String
  accountName     String
  bsbNumber       String
  accountNumber   String
  isPrimary       Boolean  @default(true)
  employee        Employee @relation(fields: [employeeId], references: [id])
  stripeBankToken String?
  verified        Boolean  @default(false)

  @@map("bank_details")
}

model TaxInformation {
  id                  String   @id @default(uuid())
  employeeId          String   @unique
  taxFileNumber       String?
  taxScale            String?
  hasTaxFreeThreshold Boolean  @default(false)
  hasSeniorsOffset    Boolean  @default(false)
  hasStudentLoan      Boolean  @default(false)
  employee            Employee @relation(fields: [employeeId], references: [id])

  @@map("tax_information")
}

model Superannuation {
  id               String   @id @default(uuid())
  employeeId       String   @unique
  fundName         String
  memberNumber     String
  productId        String?
  contributionRate Float    @default(0.11)
  employee         Employee @relation(fields: [employeeId], references: [id])

  @@map("superannuation")
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH
  CHEQUE
}

enum PaymentStatus {
  PENDING
  PROCESSED
  FAILED
}

enum PayrollStatus {
  DRAFT
  READY_FOR_PROCESSING
  PROCESSING
  COMPLETED
  FAILED
}

model CompanyProfile {
  id             String       @id @default(uuid())
  companyName    String
  logo           String?
  address        String
  phone          String
  email          String       @unique
  website        String?
  taxNumber      String?
  registrationNo String?
  description    String?
  industry       String?
  foundedDate    DateTime?
  documents      String[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  User           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId         String?      @unique
  employees      Employee[]
  PayrollRun     PayrollRun[]

  @@map("company_profile")
}

model Attendance {
  id           String    @id @default(uuid())
  employeeId   String
  clockInTime  DateTime
  clockOutTime DateTime?
  totalHours   Float
  employee     Employee  @relation(fields: [employeeId], references: [id])

  @@map("attendances")
}

model Leave {
  id         String      @id @default(uuid())
  employeeId String
  leaveType  LeaveType
  startDate  DateTime
  endDate    DateTime
  status     LeaveStatus
  reason     String?
  employee   Employee    @relation(fields: [employeeId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("leaves")
}

enum Role {
  USER
  ADMIN
}

enum LeaveType {
  SICK
  VACATION
  PERSONAL
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Department {
  INFORMATION_TECHNOLOGY
  HUMAN_RESOURCES
  FINANCE
  MARKETING
  SALES
  OPERATIONS
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  RESIGNED
  ON_LEAVE
}

model DemoBooking {
  id            String        @id @default(uuid())
  firstName     String
  lastName      String
  email         String
  companyName   String?
  phoneNumber   String?
  preferredDate DateTime
  status        BookingStatus @default(PENDING)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([email])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}
