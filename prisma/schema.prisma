generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  name             String
  email            String
  passwordHash     String?
  role             Role
  onBoarded        Boolean         @default(false)
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  sessions         Session[]
  accounts         Account[]
  company          CompanyProfile?
  employee         Employee?
  companyProfileId String?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Employee {
  id               String          @id @default(uuid())
  userId           String          @unique
  name             String
  avatar           String?
  email            String
  phone            String
  position         String
  department       Department
  address          String
  dateOfBirth      DateTime
  joinDate         DateTime
  status           EmployeeStatus  @default(ACTIVE)
  user             User            @relation(fields: [userId], references: [id])
  attendances      Attendance[]
  payslips         Payslip[]
  leaveRequests    Leave[]
  CompanyProfile   CompanyProfile? @relation(fields: [companyProfileId], references: [id])
  companyProfileId String?

  @@map("employees")
}

model CompanyProfile {
  id             String     @id @default(uuid())
  companyName    String
  logo           String?
  address        String
  phone          String
  email          String     @unique
  website        String?
  taxNumber      String?
  registrationNo String?
  description    String?
  industry       String?
  foundedDate    DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  User           User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId         String?    @unique
  employees      Employee[]

  @@map("company_profile")
}

// model Job {
//   id           String        @id @default(uuid())
//   title        String
//   description  String
//   location     String
//   createdAt    DateTime      @default(now())
//   updatedAt    DateTime      @updatedAt
//   applications Application[]

//   @@map("jobs")
// }

// model Application {
//   id         String            @id @default(uuid())
//   employeeId String
//   jobId      String
//   status     ApplicationStatus
//   employee   Employee          @relation(fields: [employeeId], references: [id])
//   job        Job               @relation(fields: [jobId], references: [id])

//   @@map("applications")
// }

// enum ApplicationStatus {
//   applied
//   shortlisted
//   rejected
//   hired
// }

model Attendance {
  id           String    @id @default(uuid())
  employeeId   String
  clockInTime  DateTime
  clockOutTime DateTime?
  totalHours   Float
  employee     Employee  @relation(fields: [employeeId], references: [id])

  @@map("attendances")
}

model Payslip {
  id             String   @id @default(uuid())
  employeeId     String
  payPeriodStart DateTime
  payPeriodEnd   DateTime
  grossAmount    Float
  netAmount      Float
  deductions     Float
  createdAt      DateTime @default(now())
  employee       Employee @relation(fields: [employeeId], references: [id])

  @@map("payslips")
}

model Leave {
  id         String      @id @default(uuid())
  employeeId String
  leaveType  LeaveType
  startDate  DateTime
  endDate    DateTime
  status     LeaveStatus
  employee   Employee    @relation(fields: [employeeId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("leaves")
}

// model Onboarding {
//   id               Int              @id @default(autoincrement())
//   employeeId       Int              @unique
//   onboardingStatus OnboardingStatus
//   onboardingDate   DateTime
//   createdAt        DateTime         @default(now())
//   employee         Employee         @relation(fields: [employeeId], references: [id])

//   @@map("onboardings")
// }

enum Role {
  USER
  ADMIN
}

enum LeaveType {
  SICK
  VACATION
  PERSONAL
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Department {
  INFORMATION_TECHNOLOGY
  HUMAN_RESOURCES
  FINANCE
  MARKETING
  SALES
  OPERATIONS
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  RESIGNED
  ON_LEAVE
}
